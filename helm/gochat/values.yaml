nameOverride: ""
fullnameOverride: ""

imagePullSecrets: []

scylla:
  enabled: true
  replicaCount: 1
  image:
    repository: scylladb/scylla
    tag: "6.2"
    pullPolicy: IfNotPresent
  developerMode: true
  service:
    type: ClusterIP
    ports:
      intra: 7000
      cql: 9042
      jmx: 7199
  persistence:
    enabled: true
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 10Gi
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  lifecycle:
    createKeyspace:
      enabled: true
      keyspace: gochat
      replicationClass: SimpleStrategy
      replicationFactor: 1

nats:
  enabled: true
  replicaCount: 1
  image:
    repository: nats
    tag: "2.10.22-alpine3.20"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    ports:
      client: 4222
      monitoring: 8222
      route: 6222
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

indexerNats:
  enabled: true
  replicaCount: 1
  image:
    repository: nats
    tag: "2.10.22-alpine3.20"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    ports:
      client: 4222
      monitoring: 8222
      route: 6222
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

keydb:
  enabled: true
  replicaCount: 1
  image:
    repository: eqalpha/keydb
    tag: alpine
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 6379
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

auth:
  enabled: true
  replicaCount: 1
  image:
    repository: ghcr.io/flameinthedark/gochat-auth
    tag: latest
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3100
  env: []
  config: |
    # App
    app_name: "GoChat"
    base_url: "http://example.com"

    # API
    server_address: ":3100"
    api_log: true
    idempotency_storage_lifetime: 10
    rate_limit_time: 1
    swagger: false
    rate_limit_requests: 20

    # Auth
    auth_secret: "change_me_before_use_it_in_production"

    # Email
    email_source: "no-reply@example.com"
    email_name: "no-reply"
    email_template: "./email_notify.tmpl"
    password_reset_template: "./password_reset.tmpl"
    email_provider: "smtp"
    sendpulse_user_id: ""
    sendpulse_secret: ""
    resend_api_key: ""
    smtp_host: "host.docker.internal"
    smtp_port: 2525
    smtp_username: ""
    smtp_password: ""
    smtp_use_tls: false

    # Redis
    keydb: "keydb:6379"

    # PostgreSQL
    pg_dsn: "host=citus-master port=5432 user=postgres dbname=gochat sslmode=disable"
  emailTemplate: |
    Hello {{.RecipientName}},

    You have a new notification from GoChat.

    Thanks,
    The GoChat Team
  passwordResetTemplate: |
    Hello {{.RecipientName}},

    We received a request to reset your GoChat password. Use the token below to complete the process:

    {{.Token}}

    If you did not request this, you can safely ignore this email.

    Thanks,
    The GoChat Team
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

api:
  enabled: true
  replicaCount: 1
  image:
    repository: ghcr.io/flameinthedark/gochat-api
    tag: latest
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3100
  env: []
  config: |
    # App
    app_name: "GoChat"
    base_url: "http://example.com"

    # API
    swagger: true
    rate_limit_time: 1
    rate_limit_requests: 10
    server_address: ":3100"

    # Auth
    auth_secret: "change_me_before_use_it_in_production"

    # Cassandra
    cluster: ["scylla"]
    cluster_keyspace: "gochat"

    # Redis
    keydb: "keydb:6379"

    # S3
    s3_endpoint: minio:9000
    s3_access_key_id: lF0b7V15OZCv2eGggCg5
    s3_secret_access_key: 55ug80hPgx4nFPoFJXvwBHns1XwXmZrcKli8UHoz

    # PostgreSQL
    pg_dsn: "host=citus-master port=5432 user=postgres dbname=gochat sslmode=disable"

    # OpenSearch
    os_insecure_skip_verify: true
    os_addresses: ["http://opensearch:9200"]
    os_username: "admin"
    os_password: "CustOM-Pa55w0Rd"

    # NATS
    nats_conn_string: "nats://nats:4222"
    indexer_nats_conn_string: "nats://indexer-nats:4222"
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

ws:
  enabled: true
  replicaCount: 1
  image:
    repository: ghcr.io/flameinthedark/gochat-ws
    tag: latest
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3100
  env: []
  config: |
    # Auth
    auth_secret: "change_me_before_use_it_in_production"

    # Cassandra
    cluster: ["scylla"]
    cluster_keyspace: "gochat"

    # PostgreSQL
    pg_dsn: "host=citus-master port=5432 user=postgres dbname=gochat sslmode=disable"
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

indexer:
  enabled: true
  replicaCount: 1
  image:
    repository: ghcr.io/flameinthedark/gochat-indexer
    tag: latest
    pullPolicy: IfNotPresent
  env: []
  config: |
    # NATS
    nats_conn_string: "nats://indexer-nats:4222"

    # OpenSearch
    os_insecure_skip_verify: true
    os_addresses: ["http://opensearch:9200"]
    os_username: "admin"
    os_password: "CustOM-Pa55w0Rd"
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

ui:
  enabled: true
  replicaCount: 1
  image:
    repository: ghcr.io/flameinthedark/gochatui
    tag: latest
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 80
  env:
    PUBLIC_WS_URL: "https://example.com"
    PUBLIC_API_BASE_URL: "https://example.com"
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

opensearch:
  enabled: true
  replicaCount: 1
  image:
    repository: opensearchproject/opensearch
    tag: "2.13.0"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 9200
  env:
    OPENSEARCH_JAVA_OPTS: -Xms1g -Xmx1g
    OPENSEARCH_INITIAL_ADMIN_PASSWORD: "CustOM-Pa55w0Rd"
  extraArgs:
    - "-Ediscovery.type=single-node"
    - "-Eplugins.security.disabled=true"
    - "-Ebootstrap.memory_lock=true"
  persistence:
    enabled: true
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 30Gi
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

opensearchDashboards:
  enabled: true
  replicaCount: 1
  image:
    repository: opensearchproject/opensearch-dashboards
    tag: "2.13.0"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 5601
  env:
    OPENSEARCH_HOSTS: "http://gochat-opensearch:9200"
    DISABLE_SECURITY_DASHBOARDS_PLUGIN: "true"
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

traefik:
  enabled: true
  replicaCount: 1
  image:
    repository: traefik
    tag: v3.4
    pullPolicy: IfNotPresent
  service:
    type: LoadBalancer
    webPort: 80
    dashboardPort: 8080
  additionalArguments:
    - "--api.insecure=true"
    - "--providers.kubernetescrd=true"
    - "--providers.kubernetesingress=true"
    - "--entrypoints.web.address=:80"
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

citus:
  enabled: true
  image:
    repository: citusdata/citus
    tag: "13.0.3"
    pullPolicy: IfNotPresent
  auth:
    postgresUser: postgres
    postgresPassword: postgres
    postgresDb: gochat
    hostAuthMethod: trust
  master:
    persistence:
      enabled: true
      storageClass: ""
      accessModes:
        - ReadWriteOnce
      size: 20Gi
    service:
      type: ClusterIP
      port: 5432
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
  worker:
    enabled: false
    replicaCount: 1
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
  manager:
    enabled: false
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    extraVolumeMounts: []
    extraVolumes: []

serviceAccount:
  create: true
  annotations: {}
  name: ""

rbac:
  create: true

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: example.com
      paths:
        - path: /app
          pathType: Prefix
          service: ui
          port: 80
        - path: /api/v1
          pathType: Prefix
          service: api
          port: 3100
        - path: /api/v1/auth
          pathType: Prefix
          service: auth
          port: 3100
        - path: /ws
          pathType: Prefix
          service: ws
          port: 3100
  tls: []
