services:
  scylla:
    image: scylladb/scylla:6.2
    volumes:
      - scylla-data:/var/lib/scylla
      - ./init/init-scylladb.sh:/init-scylladb.sh
    ports:
      - "7000:7000"
      - "9042:9042"
      - "7199:7199"
    environment:
      SCYLLA_DEVELOPER_MODE: "${SCYLLA_DEVELOPER_MODE:-1}"
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "SELECT now() FROM system.local;"]
      interval: 10s
      retries: 5
    restart: always

  nats:
    image: nats:2.10.22-alpine3.20
    ports:
      - "4222:4222"
      - "8222:8222"
      - "6222:6222"
    restart: always

  indexer-nats:
    image: nats:2.10.22-alpine3.20
    ports:
      - "4333:4222"
      - "8333:8222"
      - "6333:6222"
    restart: always

  keydb:
    image: eqalpha/keydb:alpine
    ports:
      - "6379:6379"
    restart: always

  auth:
    image: ghcr.io/flameinthedark/gochat-auth:${GOCHAT_IMAGE_VARIANT:-latest}
    restart: always
    volumes:
      - ./config/auth_config.example.yaml:/dist/config.yaml
      - ./templates/email_notify.tmpl:/dist/email_notify.tmpl
      - ./templates/password_reset.tmpl:/dist/password_reset.tmpl
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=PathPrefix(`/api/v1/auth`)"
      - "traefik.http.routers.auth.service=auth"
      - "traefik.http.services.auth.loadbalancer.server.port=3100"
      - "traefik.docker.network=gochat_traefik"
    depends_on:
      keydb:
        condition: service_started
      citus-master:
        condition: service_started
      migrations:
        condition: service_completed_successfully
    networks:
      - traefik
      - default

  ui:
    image: ghcr.io/flameinthedark/${GOCHAT_UI_IMAGE:-gochatui}:${GOCHAT_IMAGE_VARIANT:-latest}
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ui.rule=PathPrefix(`/`)"
      - "traefik.http.routers.ui.service=ui"
      - "traefik.http.services.ui.loadbalancer.server.port=80"
      - "traefik.docker.network=gochat_traefik"
    environment:
      PUBLIC_WS_URL: "${PUBLIC_WS_URL:-https://example.com}"
      PUBLIC_API_BASE_URL: "${PUBLIC_API_BASE_URL:-https://example.com}"
      PUBLIC_BASE_PATH: "${PUBLIC_BASE_PATH:-/}"
    networks:
      - traefik
      - default

  api:
    image: ghcr.io/flameinthedark/gochat-api:${GOCHAT_IMAGE_VARIANT:-latest}
    restart: always
    volumes:
      - ./config/api_config.example.yaml:/dist/config.yaml
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=PathPrefix(`/api/v1`)"
      - "traefik.http.routers.api.service=api"
      - "traefik.http.services.api.loadbalancer.server.port=3100"
      - "traefik.docker.network=gochat_traefik"
    depends_on:
      scylla:
        condition: service_healthy
      keydb:
        condition: service_started
      nats:
        condition: service_started
      auth:
        condition: service_started
      migrations:
        condition: service_completed_successfully
    networks:
      - traefik
      - default

  attachments:
    image: ghcr.io/flameinthedark/gochat-attachments:${GOCHAT_IMAGE_VARIANT:-latest}
    restart: always
    volumes:
      - ./config/attachments_config.example.yaml:/dist/config.yaml
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.attachments.rule=PathPrefix(`/api/v1/upload`)"
      - "traefik.http.routers.attachments.priority=100"
      - "traefik.http.routers.attachments.service=attachments"
      - "traefik.http.services.attachments.loadbalancer.server.port=3200"
      - "traefik.docker.network=gochat_traefik"
    depends_on:
      scylla:
        condition: service_healthy
      auth:
        condition: service_started
      citus-master:
        condition: service_started
    networks:
      - traefik
      - default

  ws:
    image: ghcr.io/flameinthedark/gochat-ws:${GOCHAT_IMAGE_VARIANT:-latest}
    restart: always
    volumes:
      - ./config/ws_config.example.yaml:/dist/config.yaml
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ws.rule=PathPrefix(`/ws`)"
      - "traefik.http.routers.ws.middlewares=ws-stripprefix"
      - "traefik.http.middlewares.ws-stripprefix.stripprefix.prefixes=/ws"
      - "traefik.http.middlewares.ws-stripprefix.stripprefix.forceslash=true"
      - "traefik.http.routers.ws.service=ws"
      - "traefik.http.services.ws.loadbalancer.server.port=3100"
      - "traefik.docker.network=gochat_traefik"
    depends_on:
      nats:
        condition: service_started
    networks:
      - traefik
      - default

  webhook:
    image: ghcr.io/flameinthedark/gochat-webhook:${GOCHAT_IMAGE_VARIANT:-latest}
    restart: always
    volumes:
      - ./config/webhook_config.example.yaml:/dist/config.yaml
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.webhook.rule=PathPrefix(`/api/v1/webhook`)"
      - "traefik.http.routers.webhook.priority=100"
      - "traefik.http.routers.webhook.service=webhook"
      - "traefik.http.services.webhook.loadbalancer.server.port=3200"
      - "traefik.docker.network=gochat_traefik"
    depends_on:
      traefik:
        condition: service_started
      etcd:
        condition: service_started
      scylla:
        condition: service_healthy
      keydb:
        condition: service_started
      nats:
        condition: service_started
    networks:
      - traefik
      - default

  indexer:
    image: ghcr.io/flameinthedark/gochat-indexer:${GOCHAT_IMAGE_VARIANT:-latest}
    restart: always
    volumes:
      - ./config/indexer_config.example.yaml:/dist/config.yaml
    depends_on:
      indexer-nats:
        condition: service_started
      opensearch:
        condition: service_started

  migrations:
    image: golang:1.23-alpine
    command: ["/bin/sh", "/scripts/run-migrations.sh"]
    environment:
      PG_ADDRESS: ${PG_ADDRESS:-postgres://postgres@citus-master:5432/gochat?sslmode=disable}
      CASSANDRA_ADDRESS: ${CASSANDRA_ADDRESS:-cassandra://scylla:9042/gochat?x-multi-statement=true}
      GOCHAT_MIGRATIONS_REPO: ${GOCHAT_MIGRATIONS_REPO:-https://github.com/FlameInTheDark/gochat.git}
      GOCHAT_MIGRATIONS_BRANCH: ${GOCHAT_MIGRATIONS_BRANCH:-main}
    volumes:
      - ../helm/gochat/files/scripts/run-migrations.sh:/scripts/run-migrations.sh:ro
    depends_on:
      scylla:
        condition: service_healthy
      citus-master:
        condition: service_started
      citus-init:
        condition: service_completed_successfully
    restart: "no"

  opensearch:
    image: opensearchproject/opensearch:2.13.0
    environment:
      discovery.type: single-node
      plugins.security.disabled: true
      bootstrap.memory_lock: true
      OPENSEARCH_JAVA_OPTS: -Xms1g -Xmx1g
      OPENSEARCH_INITIAL_ADMIN_PASSWORD: "${OPENSEARCH_INITIAL_ADMIN_PASSWORD:-CustOM-Pa55w0Rd}"
    ulimits:
      memlock:
        # Setting unlimited memlock requires additional capabilities that are
        # not available in many Docker environments (including the one used
        # for these exercises).  Use a reasonable default limit instead so
        # the container can start without needing CAP_IPC_LOCK.
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    ports:
      - "9200:9200"

  dashboards:
    image: opensearchproject/opensearch-dashboards:2.13.0
    ports:
      - "5601:5601"
    environment:
      OPENSEARCH_HOSTS: "${OPENSEARCH_HOSTS:-http://opensearch:9200}"
      DISABLE_SECURITY_DASHBOARDS_PLUGIN: "${DISABLE_SECURITY_DASHBOARDS_PLUGIN:-true}"
    depends_on:
      - opensearch

  traefik:
    image: traefik:v3.4
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.transport.respondingTimeouts.idleTimeout=120s"
      - "--entrypoints.web.transport.respondingTimeouts.readTimeout=0s"
      - "--entrypoints.web.transport.respondingTimeouts.writeTimeout=0s"
      - "--serversTransport.forwardingTimeouts.idleConnTimeout=120s"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - traefik

  prometheus:
    image: prom/prometheus
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus-data:/prometheus
    restart: always
    ports:
      - "9090:9090"

  postgres-exporter-master:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres@citus-master:5432/gochat?sslmode=disable
      - PG_EXPORTER_EXTEND_QUERY_PATH=/etc/postgres_exporter/queries.yml
      - PG_EXPORTER_AUTO_DISCOVER_DATABASES=false
      - PG_EXPORTER_EXCLUDE_DATABASES=postgres,template0,template1
    depends_on:
      citus-master:
        condition: service_started
      citus-init:
        condition: service_completed_successfully
    volumes:
      - ./monitoring/postgres-exporter/queries-citus.yml:/etc/postgres_exporter/queries.yml:ro

  postgres-exporter-worker:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres@citus-worker:5432/postgres?sslmode=disable
      - PG_EXPORTER_AUTO_DISCOVER_DATABASES=true
    depends_on:
      - citus-worker

  loki:
    image: grafana/loki:latest
    ports:
      - "3200:3100"
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml

  grafana:
    image: grafana/grafana-oss
    restart: always
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3030:3000"

  citus-master:
    container_name: "${COMPOSE_PROJECT_NAME:-citus}_master"
    image: "citusdata/citus:13.0.3"
    ports: [ "${COORDINATOR_EXTERNAL_PORT:-5432}:5432" ]
    labels: [ "com.citusdata.role=Master" ]
    environment: &AUTH
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-postgres}"
      PGUSER: "${POSTGRES_USER:-postgres}"
      PGPASSWORD: "${POSTGRES_PASSWORD:-postgres}"
      POSTGRES_HOST_AUTH_METHOD: "${POSTGRES_HOST_AUTH_METHOD:-trust}"
      POSTGRES_DB: "gochat"
    networks:
      default:
        aliases:
          - master
      citus:
        aliases:
          - master
  citus-worker:
    image: "citusdata/citus:13.0.3"
    labels: [ "com.citusdata.role=Worker" ]
    depends_on: [ citus-manager ]
    environment: *AUTH
    command: "/wait-for-manager.sh"
    volumes:
      - healthcheck-volume:/healthcheck
    networks:
      - default
      - citus
  citus-manager:
    container_name: "${COMPOSE_PROJECT_NAME:-citus}_manager"
    image: "citusdata/membership-manager:0.3.0"
    volumes:
      - "${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock"
      - healthcheck-volume:/healthcheck
    depends_on: [ citus-master ]
    environment: *AUTH
    networks:
      default:
        aliases:
          - manager
      citus:
        aliases:
          - manager

  citus-init:
    image: postgres:15-alpine
    restart: "no"
    depends_on:
      citus-master:
        condition: service_started
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD:-postgres}
    entrypoint: ["/bin/sh", "-c", "until pg_isready -h citus-master -p 5432 -U ${POSTGRES_USER:-postgres}; do sleep 1; done; psql -h citus-master -U ${POSTGRES_USER:-postgres} -d gochat -v ON_ERROR_STOP=1 -c 'CREATE EXTENSION IF NOT EXISTS citus;'" ]
    networks:
      - citus

  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    restart: always
    environment:
      - ALLOW_NONE_AUTHENTICATION=no
      - ETCD_ROOT_PASSWORD=${ETCD_ROOT_PASSWORD:-changeme}
      - ETCD_ENABLE_V2=false
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd:2380
      - ETCD_INITIAL_CLUSTER=etcd=http://etcd:2380
      - ETCD_INITIAL_CLUSTER_STATE=new
      - ETCD_NAME=etcd

volumes:
  scylla-data:
  opensearch-data:
  prometheus-data:
  grafana-data:
  healthcheck-volume:

networks:
  traefik:
    name: gochat_traefik
  citus:
    name: gochat_citus
